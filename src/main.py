import yt_dlp
from mutagen.id3 import ID3, APIC
from mutagen.mp3 import MP3
from mutagen.easyid3 import EasyID3
import requests
import json
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import os

os.environ["SPOTIPY_CLIENT_ID"] = "0124eb5e28344b1994d6e7fece490afa"
os.environ["SPOTIPY_CLIENT_SECRET"] = "399537abb2be43cea872fd07eeee2306"

sp = spotipy.Spotify(
    auth_manager=SpotifyClientCredentials(
        client_id=os.environ["SPOTIPY_CLIENT_ID"],
        client_secret=os.environ["SPOTIPY_CLIENT_SECRET"],
    )
)


def track_length(milliseconds):
    length = ""
    seconds = milliseconds // 1000
    minutes = seconds // 60
    hours = minutes // 60
    if hours:
        length = f"{hours}:"
    return f"{length}{minutes%60}:{seconds%60}"


config = {"tracks": {}, "artwork": {}}


def download_track(track_id, output_dir=""):
    resp = sp.track(track_id)
    track_config = {"metadata": {}, "artwork": {}, "download": {}}
    track_config["metadata"] = {
        "title": resp["name"],
        "artist": "; ".join([artist["name"] for artist in resp["artists"]]),
        "album": resp["album"]["name"],
        "albumartist": "; ".join(
            [artist["name"] for artist in resp["album"]["artists"]]
        ),
        "length": track_length(resp["duration_ms"]),
        "date": resp["album"]["release_date"],
        "discnumber": str(resp["disc_number"]),
        "tracknumber": str(resp["track_number"]),
    }

    track_config["artwork"] = {
        "id": resp["album"]["id"],
        "url": sorted(resp["album"]["images"], key=lambda i: i["height"], reverse=True)[
            0
        ]["url"],
    }

    if resp["album"]["id"] not in config["artwork"]:
        config["artwork"][track_config["artwork"]["id"]] = requests.get(
            track_config["artwork"]["url"]
        ).content

    with yt_dlp.YoutubeDL({"noplaylist": True}) as ydl:
        search_url = (
            "ytsearch1:"
            + f"{track_config['metadata']['artist'].split(';')[0]} "
            + f"{track_config['metadata']['title']} "
            + '"Auto-generated by YouTube"'
        )
        download_url = ydl.extract_info(url=search_url, download=False)["entries"][0][
            "webpage_url"
        ]
        track_config["download"] = {
            "id": download_url.replace("https://www.youtube.com/watch?v=", ""),
            "url": download_url,
            "file": f"{output_dir}\\{''.join(e for e in track_config['metadata']['title'] if e.isalnum())}.mp3",
        }

    ydl_opts = {
        "format": "mp3/bestaudio/best",
        "outtmpl": track_config["download"]["file"],
        "quiet": True,
        "no_warnings": True,
        "postprocessors": [
            {"key": "FFmpegExtractAudio", "preferredcodec": "mp3"},
        ],
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        error_code = ydl.download(track_config["download"]["url"])

    audio = MP3(track_config["download"]["file"], ID3=EasyID3)
    for attribue, value in track_config["metadata"].items():
        audio[attribue] = value
    audio.save()

    audio = MP3(track_config["download"]["file"], ID3=ID3)
    audio.tags["APIC"] = APIC(
        encoding=0,
        mime="image/jpeg",
        type=3,
        desc="Cover",
        data=config["artwork"][track_config["artwork"]["id"]],
    )
    audio.save()

    config["tracks"][resp["id"]] = track_config


def download_album(album_id):
    album = sp.album(album_id)
    tracks = sp.album_tracks(album_id, limit=50)
    print(
        [
            download_track(x["id"], f"C:\\Users\\rasthmatic\\Music\\{album['name']}")
            for x in tracks["items"]
        ]
    )


download_album("3lS1y25WAhcqJDATJK70Mq")

# download_track("7BmpRLqZg1vLheYi1SI1Rw")
# download_track("4NTUtKqXiuqTTfEBgXyVRB")

with open("config.json", "w") as cf:
    json.dump(config["tracks"], cf, indent=4)
